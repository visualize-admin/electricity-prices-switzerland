enum CacheControlScope {
  PUBLIC
  PRIVATE
}

directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
  inheritMaxAge: Boolean
) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION

interface SearchResult {
  id: String!
  name: String!
}
type MunicipalityResult implements SearchResult {
  id: String!
  name: String!
}
type OperatorResult implements SearchResult {
  id: String!
  name: String!
}
type CantonResult implements SearchResult {
  id: String!
  name: String!
}

type Municipality @cacheControl(maxAge: 300) {
  id: String!
  name: String!
  isAbolished: Boolean
  canton: Canton!
  operators: [Operator!]!
}

type PeerGroup {
  settlementDensity: String
  energyDensity: String
}

type Operator @cacheControl(maxAge: 300) {
  id: String
  geverId: String
  name: String!
  municipalities: [Municipality!]!
  cantons: [Canton!]!
  documents: [OperatorDocument!]!
  geverDocuments: [OperatorDocument!]!
  peerGroup: PeerGroup
}

enum OperatorDocumentCategory {
  TARIFFS
  FINANCIAL_STATEMENT
  ANNUAL_REPORT
}

type OperatorDocument @cacheControl(maxAge: 300) {
  id: String!
  name: String!
  url: String!
  year: String!
  category: OperatorDocumentCategory
}

type Canton {
  id: String!
  name: String!
  municipalities: [Municipality!]!
  operator: [Operator!]!
}

type OperatorObservation @cacheControl(maxAge: 300) {
  municipality: String!
  municipalityLabel: String
  operator: String!
  operatorLabel: String
  canton: String!
  cantonLabel: String
  category: String!
  period: String!
  value(priceComponent: PriceComponent!): Float
  coverageRatio: Float!
  lowestrate: Float
  highestrate: Float
  urltr: String
}

type CantonMedianObservation @cacheControl(maxAge: 300) {
  canton: String!
  cantonLabel: String

  category: String!
  period: String!

  value(priceComponent: PriceComponent!): Float!
}

type SwissMedianObservation @cacheControl(maxAge: 300) {
  category: String!
  period: String!

  value(priceComponent: PriceComponent!): Float!
}

union Observation =
    OperatorObservation
  | CantonMedianObservation
  | SwissMedianObservation

input ObservationFilters {
  period: [String!]
  municipality: [String!]
  canton: [String!]
  operator: [String!]
  category: [String!]
  product: [String!]
}

enum PriceComponent {
  aidfee
  fixcosts
  charge
  gridusage
  energy
  fixcostspercent
  total
  annualmeteringcost
  meteringrate
}

enum ObservationKind {
  Canton
  Municipality
}

scalar WikiContentInfo
type WikiContent @cacheControl(maxAge: 60) {
  html: String!
  info: WikiContentInfo
}

type SystemInfo {
  SPARQL_ENDPOINT: String!
  VERSION: String!
}

type CubeHealth {
  ok: Boolean!
  dimensions: [String!]!
}

type Query {
  systemInfo: SystemInfo!
  municipalities(
    locale: String!
    query: String
    ids: [String!]
  ): [Municipality!]!
  allMunicipalities(locale: String!): [Municipality!]!
    @cacheControl(maxAge: 300)
  cantons(locale: String!, query: String, ids: [String!]): [Canton!]!

  operators(locale: String!, query: String, ids: [String!]): [Operator!]!

  search(locale: String!, query: String): [SearchResult!]!
    @cacheControl(maxAge: 300)

  searchMunicipalities(
    locale: String!
    query: String
    ids: [String!]
  ): [MunicipalityResult!]! @cacheControl(maxAge: 300)
  searchCantons(
    locale: String!
    query: String
    ids: [String!]
  ): [CantonResult!]! @cacheControl(maxAge: 300)
  searchOperators(
    locale: String!
    query: String
    ids: [String!]
  ): [OperatorResult!]! @cacheControl(maxAge: 300)

  municipality(locale: String!, id: String!): Municipality
  canton(locale: String!, id: String!): Canton
  operator(locale: String!, id: String!, geverId: String): Operator

  observations(
    locale: String
    filters: ObservationFilters
    observationKind: ObservationKind
  ): [OperatorObservation!] @cacheControl(maxAge: 300)

  cantonMedianObservations(
    locale: String
    filters: ObservationFilters
    observationKind: ObservationKind
  ): [CantonMedianObservation!] @cacheControl(maxAge: 300)

  swissMedianObservations(
    locale: String
    filters: ObservationFilters
  ): [SwissMedianObservation!] @cacheControl(maxAge: 300)

  wikiContent(locale: String!, slug: String!): WikiContent
    @cacheControl(maxAge: 300)

  cubeHealth: CubeHealth
}

type SunshineDataRow {
  operatorId: Int
  operatorUID: String!
  name: String!
  period: String!
  francRule: Float
  infoYesNo: Boolean
  infoDaysInAdvance: Int
  productsCount: Int
  productsSelection: Boolean
  timely: Boolean
  saidiTotal: Float
  saidiUnplanned: Float
  saifiTotal: Float
  saifiUnplanned: Float
  tariffEC2: Float
  tariffEC3: Float
  tariffEC4: Float
  tariffEC6: Float
  tariffEH2: Float
  tariffEH4: Float
  tariffEH7: Float
  tariffNC2: Float
  tariffNC3: Float
  tariffNC4: Float
  tariffNC6: Float
  tariffNH2: Float
  tariffNH4: Float
  tariffNH7: Float
  networkCostsNE5: Float
  networkCostsNE6: Float
  networkCostsNE7: Float
}

type SunshineDataIndicatorRow {
  operatorId: Int
  operatorUID: String!
  name: String!
  period: String!
  value: Float
}

type SunshineDataByIndicatorResult {
  data: [SunshineDataIndicatorRow!]!
  median: Float
}

input SunshineDataFilter {
  operatorId: Int
  period: String
  peerGroup: String
  indicator: String
  category: String
  networkLevel: String
  typology: String
}

# TODO Map more closely to predefined strings
scalar ElectricityCategory

enum Trend {
  up
  down
  stable
}

type NetworkCostsData {
  networkLevel: NetworkLevel!
  operatorRate: Float
  operatorTrend: Trend
  peerGroupMedianRate: Float
  peerGroupMedianTrend: Trend
  yearlyData: [NetworkCostRow!]!
}

type NetworkLevel {
  id: String!
}

type NetworkCostRow {
  year: Int!
  rate: Float!
  operator_id: Int!
  operator_name: String!
  network_level: String!
}

type TariffsData {
  category: ElectricityCategory!
  operatorRate: Float
  peerGroupMedianRate: Float
  yearlyData: [TariffRow!]!
}

type TariffRow {
  period: Int!
  rate: Float!
  operator_id: Int!
  operator_name: String!
  category: ElectricityCategory!
}

input NetworkCostsFilter {
  operatorId: Int!
  networkLevel: String!
  period: Int!
  operatorOnly: Boolean
}

input TariffsFilter {
  operatorId: Int!
  category: String!
  period: Int!
  operatorOnly: Boolean
}

type StabilityDataRow {
  year: Int!
  total: Float!
  unplanned: Float!
  operator: Int!
  operator_name: String!
}

type StabilityData {
  operatorTotal: Float!
  peerGroupTotal: Float!
  yearlyData: [StabilityDataRow!]!
}

input StabilityFilter {
  operatorId: Int!
  year: Int!
}

type OperationalStandardsProductVariety {
  ecoFriendlyProductsOffered: Int!
  productCombinationsOptions: Boolean!
  operatorsProductsOffered: [OperationalStandardsOperatorProduct!]!
}

type OperationalStandardsOperatorProduct {
  operatorId: String!
  ecoFriendlyProductsOffered: Int!
  year: String!
}

type OperationalStandardsServiceQuality {
  notificationPeriodDays: Int!
  informingCustomersOfOutage: Boolean!
  operatorsNotificationPeriodDays: [OperationalStandardsOperatorNotification!]!
}

type OperationalStandardsOperatorNotification {
  operatorId: String!
  days: Int!
  year: String!
}

type OperationalStandardsCompliance {
  francsRule: String!
  timelyPaperSubmission: Boolean!
  operatorsFrancsPerInvoice: [OperationalStandardsOperatorFrancs!]!
}

type OperationalStandardsOperatorFrancs {
  operatorId: String!
  francsPerInvoice: Float!
  year: String!
}

type OperationalStandardsOperator {
  peerGroup: PeerGroup!
}

type OperationalStandardsData {
  latestYear: String!
  operator: OperationalStandardsOperator!
  productVariety: OperationalStandardsProductVariety!
  serviceQuality: OperationalStandardsServiceQuality!
  compliance: OperationalStandardsCompliance!
  updateDate: String!
}

input OperationalStandardsFilter {
  operatorId: Int!
  period: Int!
}

type Query {
  sunshineData(filter: SunshineDataFilter!): [SunshineDataRow!]!
  sunshineTariffs(filter: SunshineDataFilter!): [SunshineDataRow!]!
  sunshineDataByIndicator(
    filter: SunshineDataFilter!
  ): SunshineDataByIndicatorResult!
  sunshineTariffsByIndicator(
    filter: SunshineDataFilter!
    indicator: String!
  ): [SunshineDataIndicatorRow!]!

  networkCosts(filter: NetworkCostsFilter!): NetworkCostsData!
  netTariffs(filter: TariffsFilter!): TariffsData!
  energyTariffs(filter: TariffsFilter!): TariffsData!

  saidi(filter: StabilityFilter!): StabilityData!
  saifi(filter: StabilityFilter!): StabilityData!
  operationalStandards(
    filter: OperationalStandardsFilter!
  ): OperationalStandardsData!
}
