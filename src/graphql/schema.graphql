type PriceComponents {
  total: Float!
  # TODO: Add more price components
}

type Municipality {
  id: String!
  name: String!
  canton: Canton!
  providers: [Provider!]!
  priceComponents: PriceComponents!
}

type Provider {
  id: String!
  name: String!
  municipalities: [Municipality!]!
  priceComponents: PriceComponents!
}

type Canton {
  id: String!
  name: String!
  municipalities: [Municipality!]!
  priceComponents: PriceComponents!
}

type TemporalDimension {
  iri: String!
  name: String
  min: String!
  max: String!
}

type Observation {
  municipality: String!
  municipalityLabel: String
  provider: String!
  providerLabel: String
  category: String!
  period: String!

  value(priceComponent: PriceComponent!): Float!
}

input ObservationFilters {
  period: [String!]
  municipality: [String!]
  provider: [String!]
  category: [String!]
}

enum PriceComponent {
  aidfee
  fixcosts
  charge
  gridusage
  energy
  fixcostspercent
  total
}

type Cube {
  name: String!
  iri: String!
  dimensionPeriod: TemporalDimension

  # TODO: Figure out proper query parameters!
  municipalities(query: String): [Municipality!]!
  cantons(query: String): [Canton!]!
  providers(query: String): [Provider!]!
  municipality(id: String!, query: String): Municipality
  canton(id: String!, query: String): Canton
  provider(id: String!, query: String): Provider

  observations(
    filters: ObservationFilters
  ): [Observation!]!
}

type Query {
  cubes(locale: String): [Cube!]!
  cubeByIri(iri: String!, locale: String): Cube
}
